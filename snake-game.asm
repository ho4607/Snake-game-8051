;LCD Write/Read DEFINE
;******************************************
LCDWIR	EQU	0FFE0H
LCDWDR	EQU	0FFE1H
LCDRIR	EQU	0FFE2H
LCDRDR	EQU	0FFE3H

;Variable Define
;******************************************
;(LCD VARIABLE)
INST	EQU	20H
DATA	EQU	21H
LROW	EQU	22H
LCOL	EQU	23H
NUMFONT	EQU	24H
FDPL	EQU	25H
FDPH	EQU	26H

;(KEY INTERFACE VARIABLE)
;*****************************************
VSEC	EQU	30H
VMIN	EQU	31H
VHOUR	EQU	32H
VBUF	EQU	33H

;R/W LCD INSTRUCTION DEFINE 
;******************************************
CLEAR	 EQU	01H
CUR_HOME EQU	02H
ENTRY2	 EQU	06H
DCB6	 EQU	0EH
FUN5	 EQU	38H
LINE_1	 EQU	80H
LINE_2	 EQU	0C0H

;KEY INTERFACE INSTRUCTION DEFINE
;*****************************************
DATAOUT	EQU	0FFF0H
DATAIN	EQU	0FFF1H

;KEY INTERFACE DEFINE KEY& CONSTANT
;*****************************************
REP_COUNT EQU	5
RWKEY	EQU	10H
COMMA	EQU	11H
PERIOD	EQU	12H
GO	EQU	13H
REG	EQU	14H
CD	EQU	15H
INCR	EQU	16H
ST	EQU	17H
RST	EQU	18H

;7-SEGMENT ARRAY DEFINE
;*******************************************
SEG1	EQU	0FFC1H	;SEC
SEG2	EQU	0FFC2H	;MIN
SEG3	EQU	0FFC3H  ;HOUR


;DOT MATRIX COLOR CHANGE
;******************************************
COLGREEN	EQU	0FFC5H
COLRED	EQU	0FFC6H
ROW	EQU	0FFC7H

;TIMER DEFINE
;******************************************
COUNTER	EQU	0040H
NUM1	EQU	0041H
NUM2	EQU	0042H

	ORG 	8000H


;GAME MAIN                             : 메인에 해당
;****************************************************************************
;****************************************************************************
INTRO:	CALL	RANDOM
INTRO1:	CALL	LCD_INIT
	CALL	LED_INIT
	CALL	DOTMATRIX_INIT
	JMP	GAME_INTRO

MAIN: 	
	CALL 	SCORE
	CALL	DOTSNAKE
MOVCHECK:
	MOV	A,#11100000B
	CALL	SUBKEY
	CJNE	A,#0FFH,PRESSBTN
	JMP	MAIN

;****************************************************************************

;COMMON SUBROUTIONE 공동으로 사용되는 서브루틴
;*****************************************
DELAY: 	MOV	A,R7		;딜레이 서브루틴
	PUSH	A
	MOV	A,R6
	PUSH	A
	MOV	A,R5
	PUSH	A

	MOV R7, #02H
DELAY1: MOV R6, #00FH
DELAY2: MOV R5, #0A0H
DELAY3: DJNZ R5, DELAY3
	DJNZ R6, DELAY2
	DJNZ R7, DELAY1

	POP	A
	MOV	R5,A
	POP	A
	MOV	R6,A
	POP	A
	MOV	R7,A
	RET

BTN_DELAY: 	        	;버튼 바운스에 사용되는 딜레이
	MOV	A,R7
	PUSH	A
	MOV	A,R6
	PUSH	A
	MOV 	R7,#020H
REPEAT: 
	MOV 	R6,#0FFH 
	MOV	A,R6
	DJNZ 	R6,$
	DJNZ 	R7,REPEAT
	
	POP	A
	MOV	R6,A
	POP	A
	MOV	R7,A
	RET


;GAME SUBROUTINE
;******************************************
GAME_INTRO:			;게임 시작전 인트 메세지 서브루틴
	MOV	LROW,#01H
	MOV	LCOL,#02H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE1
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	MOV	NUMFONT,#0EH
	CALL	DISFONT

	MOV	LROW,#02H
	MOV	LCOL,#02H
	CALL	CUR_MOV	

	MOV	DPTR,#MESSAGE2
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	MOV	NUMFONT,#0EH
	CALL	DISFONT
	
	CALL	FINDKEYCODE
	CALL	BOUNCE
	CALL	TIMER_START
	MOV	R1,#00010000B
	MOV	R2,#00010000B

	CALL	FEED
	CALL	DOTSNAKE
	JMP	MAIN


PRESSBTN:			;버튼이 눌리면 어떤 값인지 분석
	CALL	FINDKEYCODE	;키 입력 체크
	MOV	R5,A		;R5에 키 입력값 백업
	CJNE	A,#0AH,NOT_TIMERPAUSE
	CLR	TCON.TR0
NOT_TIMERPAUSE:		
	CALL	BOUNCE		;BOUNCE 현상 제거

	CALL	SNAKEMOVE
	CALL	PAUSE
	JMP	GAMERESET
	
PAUSE:				;B버튼일 경우, 일시정지
	PUSH	A
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A

	CLR	C
	MOV	A,R5
	CJNE	A,#0BH,NOTPAUSE

	CLR	TCON.TR0
	
	MOV	LROW,#01H
	MOV	LCOL,#00H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE5
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	MOV	NUMFONT,#14H
	CALL	DISFONT

	CALL	FINDKEYCODE
	CALL	BOUNCE
	
	SETB	TCON.TR0
	
	MOV	R1,NUM1
	MOV	R2,NUM2
	CALL	LCDTIMER
NOTPAUSE:			;버튼 입력이 B가 아닌경우
	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A
	POP	A
	RET

GAMERESET:			;A 버튼일 경우, 게임 다시시작
	MOV	A,R5
	CLR	C
	CJNE	A,#0AH,NOTGAMERESET
	JMP	INTRO1
NOTGAMERESET:
	JMP	MAIN

SNAKEMOVE:			;키 입력에 따른 SNAKE 움직임
	CLR	C
	MOV	A,R5
	JZ	LEFT		;키 입력이 0이라면 왼쪽으로 감
	MOV	A,R5
	SUBB	A,#01H
	JZ	DOWN		;키 입력이 1이라면 아래로 감
	MOV	A,R5	
	SUBB	A,#02H
	JZ	RIGHT		;키 입력이 2라면 오른쪽으로 감
	MOV	A,R5
	SUBB	A,#05H
	JZ	UP		;키 입력이 5라면 위로 감
	RET

				;뱀이 움직이는 동작 서브루틴
UP:	MOV	A,R1		
	RRC	A
	JC	SNAKECHECK
	MOV	R1,A
	CALL	DOTSNAKE
	RET
DOWN:	MOV	A,R1
	RLC	A
	JC	SNAKECHECK
	MOV	R1,A
	CALL	DOTSNAKE
	RET
LEFT:	MOV	A,R2
	RRC	A
	JC	SNAKECHECK
	MOV	R2,A
	CALL	DOTSNAKE
	RET
RIGHT:	MOV	A,R2
	RLC	A
	JC	SNAKECHECK
	MOV	R2,A
	CALL	DOTSNAKE
	RET


SNAKECHECK: 			;SNAKE가 벽에 닿았는지 체크 
	CALL	DOTMATRIX_INIT
	MOV	R3,#11111111B
	MOV	R4,#11111111B

	CLR	TCON.TR0
	
	MOV	LROW,#01H
	MOV	LCOL,#05H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE4
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	MOV	NUMFONT,#09H
	CALL	DISFONT

STOP:	CALL 	DOTCOLR		
	CALL	DELAY
	CALL	DELAY
	CALL	DELAY
	CALL	DOTMATRIX_INIT
	CALL	DELAY
	CALL	DELAY
	CALL	DELAY

	MOV	A,#11100000B
	CALL	SUBKEY
	CJNE	A,#0FFH,RESTART
	JMP	STOP
RESTART:
	CALL	FINDKEYCODE	;키 입력 체크
	MOV	R5,A
	CALL	BOUNCE		;BOUNCE 현상 제거
	MOV	A,R5
	CJNE	A,#0AH,NOTGAMERESET1
	JMP	INTRO1
NOTGAMERESET1:
	JMP	STOP

FEED:				;먹이 생성
	MOV	A,R0
	PUSH	A
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A

	MOV	A,TL1
	MOV	B,#3
	MUL	AB
	MOV	R0,A
	ANL	A,#00001111B
	MOV	R1,A
	MOV	A,R0
	ANL	A,#11110000B
	SWAP	A
	MOV	R2,A
	MOV	R3,#00000001B
	MOV	R4,#00000001B

SETROW:	MOV	A,R3		
	RR	A
	MOV	R3,A
	DJNZ	R1,SETROW

SETCOL:	MOV	A,R4
	RR	A
	MOV	R4,A
	DJNZ	R2,SETCOL

	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A
	POP	A
	MOV	R0,A
	RET

SCORE:	MOV	A,R1		;SCORE : 점수획득
	SUBB	A,R3
	JZ	CHECKCOL
	RET
CHECKCOL:
	MOV	A,R2
	SUBB	A,R4
	JZ	GETSCORE
	RET
GETSCORE:
	CALL	FEED
	CALL	UPSCORE
	RET

LED_INIT:     ; LED CLEAR	;더미 LED값 초기화
	MOV	A,#00H
	MOV	R0,#00H

	MOV	DPTR,#SEG1
	MOVX	@DPTR,A

	MOV	DPTR,#SEG2
	MOVX	@DPTR,A

	MOV	DPTR,#SEG3
	MOVX	@DPTR,A
	RET

UPSCORE:			;UPSCORE : 7-SEGEMENT ARRAY에 SCORE 1 증가
				;R0 : SCORE 저장
	MOV	A,R0
	INC	A
	DA	A
	MOV	R0,A
	
	MOV	DPTR,#SEG1	
	MOVX	@DPTR,A
	RET

;DOTMATRIX SUBROUTINE
;**********************************************************
				;R1 : ROW GREEN의 값
				;R2 : COLUMN GREEN의 값
				;R3 : ROW RED의 값
				;R4 : COLUMN RED의 값
DOTMATRIX_INIT: 		;DOT MATRIX INTIALIZE
	PUSH	A
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A
	MOV	A,R3
	PUSH	A
	MOV	A,R4
	PUSH	A

	MOV	R1,#00H
	MOV	R2,#00H
	MOV	R3,#00H
	MOV	R4,#00H
				
	CALL	DOTCOLG		;DOT MATRIX에 현재 값 쓰기
	CALL	DOTCOLR
	
	POP	A
	MOV	R4,A
	POP	A
	MOV	R3,A
	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A
	POP	A
	RET

DOTSNAKE:			;뱀과 먹이 출력
	CALL	DOTMATRIX_INIT
	CALL	DOTCOLG
	CALL	DELAY
	CALL	DOTMATRIX_INIT
	CALL	DOTCOLR
	CALL	DELAY
	RET

DOTCOLG:			;DOTCOLG : DOT MATRIX GREEN LED 값 쓰기
MOV	DPTR,#COLGREEN
	MOV	A,R2
	MOVX	@DPTR,A

	MOV	DPTR,#ROW
	MOV	A,R1
	MOVX	@DPTR,A
	RET

DOTCOLR:			;DOTCOLR : DOT MATRIX RED LED 값 쓰기
	MOV	DPTR,#COLRED
	MOV	A,R4
	MOVX	@DPTR,A

	MOV	DPTR,#ROW
	MOV	A,R3
	MOVX	@DPTR,A
	RET

;LCD SUBROUTINES
;******************************************
LCD_INIT:			; LCD 값 초기화
	MOV	INST,#FUN5
	CALL	INSTWR
	MOV	INST,#DCB6
	CALL	INSTWR
		
	MOV  	INST,#CLEAR
	CALL 	INSTWR

	MOV	INST,#ENTRY2
	CALL	INSTWR

	RET

DISFONT:			; LCD에 출력
	MOV	A,R5
	PUSH	A
	MOV	R5,#00H
FLOOP:	MOV	DPL,FDPL
	MOV	DPH,FDPH
	MOV	A,R5
	MOVC	A,@A+DPTR
	MOV	DATA,A

	CALL	DATAWR
	INC	R5
	MOV	A,R5
	CJNE	A,NUMFONT,FLOOP
	POP	A
	MOV	R5,A
	RET

DISFONT1:			; 초 단위 출력
	MOV	A,R1
	PUSH	A
	MOV	DPL,FDPL
	MOV	DPH,FDPH
	MOV	A,R1
	MOVC	A,@A+DPTR
	MOV	DATA,A
	CALL	DATAWR
	POP	A
	MOV	R1,A
	RET

DISFONT2:			; 분 단위 출력
	MOV	A,R2
	PUSH	A
	MOV	DPL,FDPL
	MOV	DPH,FDPH
	MOV	A,R2
	MOVC	A,@A+DPTR
	MOV	DATA,A
	CALL	DATAWR
	POP	A
	MOV	R2,A
	RET

CUR_MOV:			; LCD 커서 이동
	MOV	A,LROW
	CJNE	A,#01H,NEXT
	MOV	A,#LINE_1
	ADD	A,LCOL
	MOV	INST,A
	CALL	INSTWR
	JMP	RET_POINT

NEXT:	CJNE	A,#02H,RET_POINT	
	MOV	A,#LINE_2
	ADD	A,LCOL
	MOV	INST,A
	CALL	INSTWR
RET_POINT: RET

INSTWR:	CALL	INSTRD
	MOV	DPTR,#LCDWIR
	MOV	A,INST
	MOVX	@DPTR,A
	RET
DATAWR:	CALL	INSTRD
	MOV	DPTR,#LCDWDR
	MOV	A,DATA
	MOVX	@DPTR,A
	RET
INSTRD:	
	MOV	DPTR,#LCDRIR
	MOVX	A,@DPTR
	JB	ACC.7,INSTRD
	RET

CLEAR_DIS:			; LCD 초기화 
	MOV  	INST,#CLEAR
	CALL 	INSTWR	
	RET

;kEY_DISPLAY:			
	;MOV	DPTR,#DLED
	;MOVX	@DPTR,A
	;RET

; LCD에 출력될 메세지 
MESSAGE1:	DB	'P','r','e','s','s'
		DB	' ','A','n','y',' '
		DB	'K','e','y',' ',' '

MESSAGE2:	DB	' ',' ',' ',' ','T'
		DB	'o',' ','S','t','a'
		DB	'r','t',' ',' ',' '

MESSAGE3:	DB	'0','1','2','3','4'
		DB	'5','6','7','8','9'

MESSAGE4:	DB	'G','A','M','E',' '
		DB	'O','V','E','R'

MESSAGE5:	DB	' ',' ',' ',' ',' '
		DB	' ',' ','P','A','U'
		DB	'S','E',' ',' ',' '
		DB	' ',' ',' ',' ',' '

;KEY INTERFACE SUBROUTINE
;********************************************
FINDKEYCODE:				
	MOV	A,R0
	PUSH	A
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A

INITIAL:
	MOV	R1,#00H			;열의 값을 저장하는 R1 초기화
	MOV	A,#11101111B		;DATA OUT의 초기값
	SETB	C

COLSCAN:
	MOV	R0,A			;R0에 DATA OUT 값 보관
	INC	R1			;열의 값 보관
	CALL	SUBKEY			;KEY PAD 입력 확인

;A가 0FFH가 아니면 키 입력이 발생한 것이다
	CJNE	A,#0FFH,RSCAN
	MOV	A,R0
	SETB	C
	RRC	A			;다음 열로 이동
	JNC	INITIAL			;모든 열을 스캔하면, 다시 시작함
	JMP	COLSCAN			;다음 열 스캔

RSCAN:	MOV	R2,#00H			;행의 값을 저장하는 R2 초기화
ROWSCAN:
	RRC	A			;어느 행이 1로 바뀌었는지 조사
	JNC	MATRIX			;캐리가 발생하면 MATRIX 루프로 넘어감
	INC	R2			;다음 행의 값 저장
	JMP	ROWSCAN			;다음 행 스캔

MATRIX:	MOV	A,R2			;A에 행의 값 저장
	MOV	B,#05H			;KEY PAD는 5열로 이루어짐
	MUL	AB			;2차원 배열을 1차원 배열로 변환
	ADD	A,R1			;A에 열의 값을 더해 정확한 키입력 좌표 저장
	CALL	INDEX			;키 코드값을 A에 저장
	MOV	B,A
	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A
	POP	A
	MOV	R0,A
	MOV	A,B
	RET

SUBKEY:	MOV	DPTR,#DATAOUT		;SUBKEY : DATA OUT으로 DATA를 내보내고,
	MOVX	@DPTR,A			;DATA IN의 값을 가져옴
	MOV	DPTR,#DATAIN
	MOVX	A,@DPTR
	RET

INDEX:	MOVC	A,@A+PC
	RET

KEYBASE:			
	DB	ST
	DB	INCR
	DB	CD
	DB	REG
	DB	GO
	DB	0CH
	DB	0DH
	DB	0EH
	DB	0FH
	DB	COMMA
	DB	08H
	DB	09H
	DB	0AH
	DB	0BH
	DB	PERIOD
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	RWKEY
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	RST

BOUNCE:					;BOUNCE : BOUNCE 현상 제거
	CALL 	BTN_DELAY		;시간을 지연
	MOV	A,#0	
	CALL	SUBKEY
	CPL	A			;눌린 키가 없으면 A는 0을 저장한다
	JNZ	BOUNCE			;눌린 키가 있으면 다시 체크한다

	CALL	BTN_DELAY		;시간을 지연
	RET

;TIMER SUBROUTINE
;******************************************
SERVICE:  				; 타이머 시작 서브루틴, 인터럽트로 수행
  	CLR     TCON.TR0  		; Timer Stop
  	MOV     TH0,#0E3H  
  	MOV     TL0,#014H   
  	SETB    TCON.TR0  		; Timer Start
  	DJNZ    COUNTER, RETURN 
 	MOV     COUNTER, #100 
  	CLR     C
  	JMP     TIMER

TIMER:          			; TIMER CONTROL 서브루틴
	PUSH	A
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A

	MOV	R1,NUM1
	MOV	R2,NUM2
	INC	R1
	CJNE	R1,#10,SETDEC
	INC	R2
	MOV	R1,#00H
SETDEC:	CJNE	R2,#6,CALLLCD
	MOV	R2,#00H
CALLLCD:
	MOV	LROW,#02H
	MOV	LCOL,#08H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE3
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	CALL	DISFONT2

	MOV	LROW,#02H
	MOV	LCOL,#09H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE3
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	CALL	DISFONT1

	MOV	NUM1,R1
	MOV	NUM2,R2
	
	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A
	POP	A
RETURN: 
  	RETI   

TIMER_START: 				; 타이머 시작 서브루틴
	MOV	A,R1
	PUSH	A
	MOV	A,R2
	PUSH	A

  	MOV 	COUNTER, #100 		; 10ms X 100 = 1secS
  	MOV 	TH0,#0D8H  		; FFFF - 2710(10000) = D8EF
  	MOV     TL0,#0EFH
  	SETB    TCON.TR0  		; Timer Start
	MOV	NUM1,00H
	MOV	R1,NUM1
	MOV	NUM2,00H
	MOV	R2,NUM2
	CALL	LCDTIMER

	POP	A
	MOV	R2,A
	POP	A
	MOV	R1,A	
  	RET

LCDTIMER: 				; 타이머 값 LCD출력
	CALL	CLEAR_DIS
	MOV	LROW,#02H
	MOV	LCOL,#08H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE3
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	CALL	DISFONT2

	MOV	LROW,#02H
	MOV	LCOL,#09H
	CALL	CUR_MOV

	MOV	DPTR,#MESSAGE3
	MOV	FDPL,DPL
	MOV	FDPH,DPH
	CALL	DISFONT1
	RET
	

RANDOM:					;RANDOM : 난수 생성
	MOV 	TMOD,#00000001B		;GATE =0,TIMER MODE,RUN MODE 01
	MOV	IE,#10000010B		;EA 1, ET0 1
	MOV	TH1,#00H
	MOV	TL1,#00H
	CLR	C
	SETB	TCON.TR1
	RET


    	ORG     9F0BH
    	JMP     SERVICE
;**********************************************
END